/*Suppose an arithmetic expression is given as a binary tree. Each leaf is an integer and each internal node is one of '+', '−', '∗', or '/'.

Given the root to such a tree, write a function to evaluate it.

For example, given the following tree:

    *
   / \
  +    +
 / \  / \
3  2  4  5
You should return 45, as it is (3 + 2) * (4 + 5).*/



int evalTree(Node root){
        
        if(root==null)
        return 0;
        
        if(root.left==null && root.right==null)
        return Integer.parseInt(root.data);
        
        int left=evalTree(root.left);
        int right=evalTree(root.right);
        
        if(root.data.equals("+"))
        return left+right;
        
        else if(root.data.equals("-"))
        return left-right;
        
        else if(root.data.equals("*"))
        return left*right;
        
        else
        
        return left/right;   
    }
    
    // TIME COMPLEXITY: O(n)
    // SPACE COMPLEXITY: O(n) [Recursion calls otherwise O(1)]
